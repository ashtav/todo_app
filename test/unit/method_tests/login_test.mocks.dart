// Mocks generated by Mockito 5.4.4 from annotations
// in todo_app/test/unit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:fetchly/fetchly.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:todo_app/app/data/api/api.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResHandler_0 extends _i1.SmartFake implements _i2.ResHandler {
  _FakeResHandler_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMultipartFile_1 extends _i1.SmartFake implements _i2.MultipartFile {
  _FakeMultipartFile_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthApi extends _i1.Mock implements _i3.AuthApi {
  MockAuthApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get status => (super.noSuchMethod(
        Invocation.getter(#status),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<_i2.ResHandler> login(Map<String, dynamic>? data) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [data],
        ),
        returnValue: _i4.Future<_i2.ResHandler>.value(_FakeResHandler_0(
          this,
          Invocation.method(
            #login,
            [data],
          ),
        )),
      ) as _i4.Future<_i2.ResHandler>);

  @override
  _i4.Future<_i2.ResHandler> get(
    String? path, {
    Map<String, dynamic>? query,
    _i2.Options? options,
    dynamic Function(
      int,
      int,
    )? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [path],
          {
            #query: query,
            #options: options,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i4.Future<_i2.ResHandler>.value(_FakeResHandler_0(
          this,
          Invocation.method(
            #get,
            [path],
            {
              #query: query,
              #options: options,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i4.Future<_i2.ResHandler>);

  @override
  _i4.Future<_i2.ResHandler> post(
    String? path,
    dynamic data, {
    bool? useFormData = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [
            path,
            data,
          ],
          {#useFormData: useFormData},
        ),
        returnValue: _i4.Future<_i2.ResHandler>.value(_FakeResHandler_0(
          this,
          Invocation.method(
            #post,
            [
              path,
              data,
            ],
            {#useFormData: useFormData},
          ),
        )),
      ) as _i4.Future<_i2.ResHandler>);

  @override
  _i4.Future<_i2.ResHandler> put(
    String? path,
    dynamic data, {
    bool? useFormData = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [
            path,
            data,
          ],
          {#useFormData: useFormData},
        ),
        returnValue: _i4.Future<_i2.ResHandler>.value(_FakeResHandler_0(
          this,
          Invocation.method(
            #put,
            [
              path,
              data,
            ],
            {#useFormData: useFormData},
          ),
        )),
      ) as _i4.Future<_i2.ResHandler>);

  @override
  _i4.Future<_i2.ResHandler> delete(String? path) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [path],
        ),
        returnValue: _i4.Future<_i2.ResHandler>.value(_FakeResHandler_0(
          this,
          Invocation.method(
            #delete,
            [path],
          ),
        )),
      ) as _i4.Future<_i2.ResHandler>);

  @override
  _i4.Future<_i2.MultipartFile> toFile(String? path) => (super.noSuchMethod(
        Invocation.method(
          #toFile,
          [path],
        ),
        returnValue: _i4.Future<_i2.MultipartFile>.value(_FakeMultipartFile_1(
          this,
          Invocation.method(
            #toFile,
            [path],
          ),
        )),
      ) as _i4.Future<_i2.MultipartFile>);

  @override
  void cancel(String? path) => super.noSuchMethod(
        Invocation.method(
          #cancel,
          [path],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<_i2.ResHandler> check(
    _i2.Response<dynamic>? response,
    int? time, {
    dynamic Function(
      int,
      dynamic,
    )? onRequest,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #check,
          [
            response,
            time,
          ],
          {#onRequest: onRequest},
        ),
        returnValue: _i4.Future<_i2.ResHandler>.value(_FakeResHandler_0(
          this,
          Invocation.method(
            #check,
            [
              response,
              time,
            ],
            {#onRequest: onRequest},
          ),
        )),
      ) as _i4.Future<_i2.ResHandler>);

  @override
  Map<String, dynamic> toMap() => (super.noSuchMethod(
        Invocation.method(
          #toMap,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}
